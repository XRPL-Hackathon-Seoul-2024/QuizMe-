/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/L49Iz5x6Lvd
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

import { useSupabase } from "@/hooks/useSupabase";
import { useParams } from "next/navigation";

import { useAccount, useWriteContract } from "wagmi";
import { abi } from "../contracts/factory-abi";

export function CompoenentViewer() {
  const params = useParams();
  const qid = params.qid;

  const { getProblemsForQuiz } = useSupabase();

  const { data: hash, writeContract } = useWriteContract();

  const [problems, setProblems] = useState([
    {
      type: "multiple-choice",
      title: "What is XRP Ledger?",
      options: [
        { title: "Public Blockchain", selected: false },
        { title: "Private Blockchain", selected: false },
        { title: "ETH Layer 2", selected: false },
      ],
    },
    {
      type: "multiple-choice",
      title: "What language does XRPL not support?",
      options: [
        { title: "Python", selected: false },
        { title: "Javascript", selected: false },
        { title: "Java", selected: false },
        { title: "Rust", selected: false },
      ],
    },
    {
      type: "text-input",
      title: "What is the full name of XRPL?",
      answer: "XRP",
    },
    {
      type: "ox",
      title: "Is XRPL Decentralized?",
      answer: "O",
    },
  ]);

  const [answers, setAnswers] = useState([[], [], [], []]);

  const { address } = useAccount();
  console.log(address);

  useEffect(() => {
    const fetchQuizData = async () => {
      const data = await getProblemsForQuiz(qid);
      //if (data) setProblems(data as any);
    };

    fetchQuizData();
  }, []);

  return (
    <div>
      <div className="px-10 my-4 w-[30rem] max-w-md font-medium text-lg mx-auto">
        <div className="text-xl mb-4">Ultimate XRP Test!</div>

        <div>Test your knowledge on XRP Devnet!</div>
        <div>You can search for additional contents on </div>
        <a className="text-blue-800" href="https://xrpl.org/">
          https://xrpl.org/
        </a>
      </div>
      <div className="flex flex-col gap-4 items-center justify-center h-full bg-background overflow-auto px-4 w-[30rem] max-w-md mx-auto">
        {problems.map((curProb, index) => {
          return (
            <ProblemComponent
              key={index}
              idx={index}
              props={curProb}
              answers={answers}
              setAnswers={setAnswers}
            />
          );
        })}
      </div>
      <div className="flex w-full justify-center w-[30rem] max-w-md mb-20 mx-auto">
        <button
          onClick={() => {
            writeContract({
              address: "0x4F0bff0b0d556a95b3B8c4a59c0a8EC4E857A182",
              abi,
              functionName: "createNewFund",
              args: [],
            });
          }}
          className="w-24 h-12 bg-black text-white rounded-3xl font-bold mx-auto"
        >
          Submit
        </button>
      </div>
      <div className="fixed flex flex-row right-4 bottom-4">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={1}
          stroke="currentColor"
          className="size-16"
          onClick={() => {
            window.scrollTo({
              top: document.documentElement.scrollHeight,
              behavior: "smooth",
            });
          }}
        >
          <path
            fill="white"
            strokeLinecap="round"
            strokeLinejoin="round"
            d="m9 12.75 3 3m0 0 3-3m-3 3v-7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
          />
        </svg>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={1}
          stroke="currentColor"
          className="size-16"
          onClick={() => {
            window.scrollTo({ top: 0, behavior: "smooth" });
          }}
        >
          <path
            fill="white"
            strokeLinecap="round"
            strokeLinejoin="round"
            d="m15 11.25-3-3m0 0-3 3m3-3v7.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
          />
        </svg>
      </div>
    </div>
  );
}

function ProblemComponent({
  idx,
  props,
  answers,
  setAnswers,
}: {
  idx: number;
  props: any;
  answers: any;
  setAnswers: any;
}) {
  const { title, type, options } = props;

  return (
    <div className="w-full max-w-md p-6 bg-card rounded-lg shadow-lg">
      <div className="flex items-center justify-between mb-4">
        <div className="text-white bg-black rounded-full w-12 h-8 font-bold flex items-center justify-center">
          {idx + 1}
        </div>
        <span className="ml-4 mr-auto text-2xl font-bold text-card-foreground">
          {title}
        </span>
      </div>
      <div className="mb-6">
        <h2 className="text-lg font-medium text-card-foreground">
          {type === "multiple-choice" && (
            <div className="flex flex-col gap-2">
              {options?.map((option: any) => {
                return (
                  <Button
                    variant="primary"
                    onClick={() => {
                      let ans = answers.slice();
                      ans[idx] = [option.title];
                      setAnswers(ans);
                    }}
                    className={`w-full justify-start border border-gray-400 border-2 h-12 ${answers[idx].indexOf(option.title) === -1 ? "text-black bg-white" : "text-white bg-black hover-bg-black"}`}
                  >
                    {option.title}
                  </Button>
                );
              })}
            </div>
          )}

          {type === "text-input" && (
            <div>
              <input
                type="text"
                className="shadow-md border-gray-400 border-2 rounded-md w-full h-12 px-4"
              />
            </div>
          )}

          {type === "ox" && (
            <div className="flex flex-row gap-4 items-center justify-center mt-10">
              <button
                onClick={() => {
                  let ans = answers.slice();
                  ans[idx] = ["O"];
                  setAnswers(ans);
                }}
              >
                {answers[idx].indexOf("O") === -1 ? <OxSvgO /> : <OxSvgOX />}
              </button>
              <button
                onClick={() => {
                  let ans = answers.slice();
                  ans[idx] = ["X"];
                  setAnswers(ans);
                }}
              >
                {answers[idx].indexOf("X") === -1 ? <OxSvgX /> : <OxSvgXX />}
              </button>
            </div>
          )}
        </h2>
      </div>
      <div className="space-y-2"></div>
    </div>
  );
}

const OxSvgO = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="97"
      height="97"
      viewBox="0 0 97 97"
      fill="none"
      className="size-40"
    >
      <rect
        x="0.750012"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        fill="white"
      />
      <rect
        x="0.750012"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        stroke="#767676"
        strokeWidth="1.1"
      />
      <g filter="url(#filter0_d_9_1555)">
        <path
          d="M48.05 77.0153C30.6563 77.0153 17.8 64.6879 17.8 47.8653C17.8 31.0428 30.6563 18.7153 48.05 18.7153C65.4438 18.7153 78.3001 31.0428 78.3001 47.8653C78.3001 64.6879 65.4438 77.0153 48.05 77.0153ZM48.05 65.8457C58.225 65.8457 65.7875 58.2858 65.7875 47.8653C65.7875 37.3768 58.225 29.885 48.05 29.885C37.8751 29.885 30.3125 37.3768 30.3125 47.8653C30.3125 58.2858 37.8751 65.8457 48.05 65.8457Z"
          fill="black"
        />
      </g>
      <defs>
        <filter
          id="filter0_d_9_1555"
          x="17.8"
          y="18.7153"
          width="62.7"
          height="60.4998"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dx="2.2" dy="2.2" />
          <feComposite in2="hardAlpha" operator="out" />
          <feColorMatrix
            type="matrix"
            values="0 0 0 0 0.85098 0 0 0 0 0.929412 0 0 0 0 1 0 0 0 1 0"
          />
          <feBlend
            mode="normal"
            in2="BackgroundImageFix"
            result="effect1_dropShadow_9_1555"
          />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="effect1_dropShadow_9_1555"
            result="shape"
          />
        </filter>
      </defs>
    </svg>
  );
};

const OxSvgX = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="97"
      height="97"
      viewBox="0 0 97 97"
      fill="none"
      className="size-40"
    >
      <rect
        x="0.55"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        fill="white"
      />
      <rect
        x="0.55"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        stroke="#767676"
        strokeWidth="1.1"
      />
      <g filter="url(#filter0_d_9_1557)">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M32.3355 22.8775C29.7194 20.2615 25.478 20.2615 22.862 22.8775C20.246 25.4935 20.246 29.7349 22.862 32.351L38.9266 48.4156L22.8621 64.4801C20.2461 67.0961 20.2461 71.3375 22.8621 73.9535C25.4781 76.5695 29.7195 76.5695 32.3355 73.9535L48.4 57.889L64.4646 73.9535C67.0806 76.5695 71.322 76.5695 73.938 73.9535C76.554 71.3375 76.554 67.0961 73.938 64.4801L57.8735 48.4156L73.9381 32.351C76.5541 29.7349 76.5541 25.4935 73.9381 22.8775C71.3221 20.2615 67.0807 20.2615 64.4646 22.8775L48.4 38.9421L32.3355 22.8775Z"
          fill="black"
        />
      </g>
      <defs>
        <filter
          id="filter0_d_9_1557"
          x="20.9"
          y="20.9155"
          width="57.2001"
          height="57.2"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dx="2.2" dy="2.2" />
          <feComposite in2="hardAlpha" operator="out" />
          <feColorMatrix
            type="matrix"
            values="0 0 0 0 1 0 0 0 0 0.854902 0 0 0 0 0.847059 0 0 0 1 0"
          />
          <feBlend
            mode="normal"
            in2="BackgroundImageFix"
            result="effect1_dropShadow_9_1557"
          />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="effect1_dropShadow_9_1557"
            result="shape"
          />
        </filter>
      </defs>
    </svg>
  );
};

const OxSvgOX = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="97"
      height="97"
      viewBox="0 0 97 97"
      fill="black"
      className="size-40"
    >
      <rect
        x="0.750012"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        fill="white"
      />
      <rect
        x="0.750012"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        stroke="#767676"
        strokeWidth="1.1"
      />
      <g filter="url(#filter0_d_9_1555)">
        <path
          d="M48.05 77.0153C30.6563 77.0153 17.8 64.6879 17.8 47.8653C17.8 31.0428 30.6563 18.7153 48.05 18.7153C65.4438 18.7153 78.3001 31.0428 78.3001 47.8653C78.3001 64.6879 65.4438 77.0153 48.05 77.0153ZM48.05 65.8457C58.225 65.8457 65.7875 58.2858 65.7875 47.8653C65.7875 37.3768 58.225 29.885 48.05 29.885C37.8751 29.885 30.3125 37.3768 30.3125 47.8653C30.3125 58.2858 37.8751 65.8457 48.05 65.8457Z"
          fill="white"
        />
      </g>
      <defs>
        <filter
          id="filter0_d_9_1555"
          x="17.8"
          y="18.7153"
          width="62.7"
          height="60.4998"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dx="2.2" dy="2.2" />
          <feComposite in2="hardAlpha" operator="out" />
          <feColorMatrix
            type="matrix"
            values="0 0 0 0 0.85098 0 0 0 0 0.929412 0 0 0 0 1 0 0 0 1 0"
          />
          <feBlend
            mode="normal"
            in2="BackgroundImageFix"
            result="effect1_dropShadow_9_1555"
          />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="effect1_dropShadow_9_1555"
            result="shape"
          />
        </filter>
      </defs>
    </svg>
  );
};

const OxSvgXX = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="97"
      height="97"
      viewBox="0 0 97 97"
      fill="black"
      className="size-40"
    >
      <rect
        x="0.55"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        fill="white"
      />
      <rect
        x="0.55"
        y="0.565625"
        width="95.7"
        height="95.7"
        rx="17.05"
        stroke="#767676"
        strokeWidth="1.1"
      />
      <g filter="url(#filter0_d_9_1557)">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M32.3355 22.8775C29.7194 20.2615 25.478 20.2615 22.862 22.8775C20.246 25.4935 20.246 29.7349 22.862 32.351L38.9266 48.4156L22.8621 64.4801C20.2461 67.0961 20.2461 71.3375 22.8621 73.9535C25.4781 76.5695 29.7195 76.5695 32.3355 73.9535L48.4 57.889L64.4646 73.9535C67.0806 76.5695 71.322 76.5695 73.938 73.9535C76.554 71.3375 76.554 67.0961 73.938 64.4801L57.8735 48.4156L73.9381 32.351C76.5541 29.7349 76.5541 25.4935 73.9381 22.8775C71.3221 20.2615 67.0807 20.2615 64.4646 22.8775L48.4 38.9421L32.3355 22.8775Z"
          fill="white"
        />
      </g>
      <defs>
        <filter
          id="filter0_d_9_1557"
          x="20.9"
          y="20.9155"
          width="57.2001"
          height="57.2"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dx="2.2" dy="2.2" />
          <feComposite in2="hardAlpha" operator="out" />
          <feColorMatrix
            type="matrix"
            values="0 0 0 0 1 0 0 0 0 0.854902 0 0 0 0 0.847059 0 0 0 1 0"
          />
          <feBlend
            mode="normal"
            in2="BackgroundImageFix"
            result="effect1_dropShadow_9_1557"
          />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="effect1_dropShadow_9_1557"
            result="shape"
          />
        </filter>
      </defs>
    </svg>
  );
};
